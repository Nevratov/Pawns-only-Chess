import java.lang.IndexOutOfBoundsException
import kotlin.math.abs
import kotlin.system.exitProcess

const val GET_LET_IN_ASII = 97

fun main() {
    println("Pawns-Only Chess")
    val playersName = getPlayersName()
    printField()
    turn(playersName[0], playersName[1])
}

val field =  mutableListOf(
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' '),
    mutableListOf(' ', 'W', ' ', ' ', ' ', ' ', 'B', ' ')
    )

fun getPlayersName(): ArrayList<String> {
    println("First Player's name:")
    val firstPlayerName = readln()
    println("Second Player's name:")
    val secondPlayerName = readln()
    return arrayListOf(firstPlayerName, secondPlayerName)
}

fun printField() { // Печать по столбцам (справа налево)
    for (row in 7 downTo 0) {
        println("  +---+---+---+---+---+---+---+---+")
        print(row + 1)
        for (col in 0 .. 7) print(" | ${field[col][row]}")
        println(" |")
    }
    println("  +---+---+---+---+---+---+---+---+")
    print(' ')
    for (col in 0..7) print("   ${col.toChar() + GET_LET_IN_ASII}")
    println("\n")
}

fun turn(firstPlayerName: String, secondPlayerName: String) {
    var statusGame = true
    var currentTurnPlayer = firstPlayerName
    while(statusGame) {

        // Check on stalemate
        checkWinConditions()
        if (currentTurnPlayer == firstPlayerName && 't' !in availableDecimalTurnsWhite) {
            println("Stalemate!\nBye!")
            exitProcess(0)
        } else if (currentTurnPlayer == secondPlayerName && 't' !in availableDecimalTurnsBlack) {
            println("Stalemate!\nBye!")
            exitProcess(0)
        }
        availableDecimalTurnsWhite = ""  // Clear available last turns
        availableDecimalTurnsBlack = "" //

        println("$currentTurnPlayer's turn:")
        val turn = readln()
        if (turn.lowercase() == "exit") {
            println("Bye!")
            statusGame = false
        }
        else if (turn.length != 4 || turn[0] !in 'a'..'h' || turn[2] !in 'a'..'h' ||
                 turn[1].toString().toInt() !in 1..8 || turn[3].toString().toInt() !in 1..8) {
            println("Invalid Input")
        } else {
            if (!checkTurn(currentTurnPlayer, firstPlayerName, turn)) continue
            currentTurnPlayer = if (currentTurnPlayer == firstPlayerName) secondPlayerName
            else firstPlayerName
            printField()
    	}
	}
}

var lastTurnWhite = arrayOf(-1,-1,-1) //X2,Y2,distance turn
var lastTurnBlack = arrayOf(-1,-1,-1) //X2,Y2,distance turn

fun checkTurn(currentTurnPlayer: String, firstPlayerName: String, turn: String): Boolean {
    val posX1 = (turn[0] - GET_LET_IN_ASII).code
    val posY1 = turn[1].toString().toInt() - 1
    val posX2 = (turn[2] - GET_LET_IN_ASII).code
    val posY2 = turn[3].toString().toInt() - 1

    if (currentTurnPlayer == firstPlayerName) {
        if (field[posX1][posY1] == 'W') {
            if (posX1 == posX2 && posY2 - posY1 == 2 && posY1 == 1 && field[posX2][posY2] != 'B') {
                field[posX2][posY2] = 'W'
                field[posX1][posY1] = ' '
                lastTurnWhite = arrayOf(posX2, posY2, 2)
            } else if (posX1 == posX2 && posY2 - posY1 == 1 && field[posX2][posY2] != 'B') {
                field[posX2][posY2] = 'W'
                field[posX1][posY1] = ' '
                lastTurnWhite = arrayOf(posX2, posY2, 1)
            } else if (checkCaptureWhite(posX1, posX2, posY1, posY2)) return true
            else {
                println("Invalid Input")
                return false
            }

        } else {
            println("No white pawn at ${turn[0]}${turn[1]}")
            return false
        }
        } else {
            if (field[posX1][posY1] == 'B') {
                if (posX1 == posX2 && posY1 - posY2 == 2 && posY1 == 6 && field[posX2][posY2] != 'W') {
                    field[posX2][posY2] = 'B'
                    field[posX1][posY1] = ' '
                    lastTurnBlack = arrayOf(posX2, posY2, 2)
                } else if (posX1 == posX2 && posY1 - posY2 == 1 && field[posX2][posY2] != 'W') {
                    field[posX2][posY2] = 'B'
                    field[posX1][posY1] = ' '
                    lastTurnBlack = arrayOf(posX2, posY2, 1)
                } else if (checkCaptureBlack(posX1, posX2, posY1, posY2)) return true
                else {
                    println("Invalid Input")
                    return false
                }
            } else {
                println("No black pawn at ${turn[0]}${turn[1]}")
                return false
            }
        }
    return true
}

var blackDecimal = 8
var whiteDecimal = 8
fun checkCaptureWhite(posX1: Int, posX2: Int, posY1: Int, posY2: Int,): Boolean {
    if (abs(posX1 - posX2) == 1 && posY2 - posY1 == 1 && field[posX2][posY2] == 'B') { // Standard capture
        field[posX2][posY2] = 'W'
        field[posX1][posY1] = ' '
        blackDecimal--
    } else if (posX1 - posX2 == 1 && field[posX1-1][posY1] == 'B' && posX2 == lastTurnBlack[0]
            && posY2 - lastTurnBlack[1] == 1 && lastTurnBlack[2] == 2) { //En passant left
        field[posX2][posY2] = 'W'
        field[posX1][posY1] = ' '
        field[posX1-1][posY1] = ' '
        blackDecimal--
    } else if (posX2 - posX1 == 1 && field[posX1+1][posY1] == 'B' && posX2 == lastTurnBlack[0]
            && posY2 - lastTurnBlack[1] == 1 && lastTurnBlack[2] == 2) { //En passant right
        field[posX2][posY2] = 'W'
        field[posX1][posY1] = ' '
        field[posX1+1][posY1] = ' '
        blackDecimal--
    } else return false
    return true
}

fun checkCaptureBlack(posX1: Int, posX2: Int, posY1: Int, posY2: Int,): Boolean {
    if (abs(posX1 - posX2) == 1 && posY1 - posY2 == 1 && field[posX2][posY2] == 'W') { // Standard capture
        field[posX2][posY2] = 'B'
        field[posX1][posY1] = ' '
        whiteDecimal--
    } else if (posX1 - posX2 == 1 && field[posX1-1][posY1] == 'W' && posX2 == lastTurnWhite[0]
        && lastTurnWhite[1] - posY2  == 1 && lastTurnWhite[2] == 2) { //En passant left
        field[posX2][posY2] = 'B'
        field[posX1][posY1] = ' '
        field[posX1-1][posY1] = ' '
        whiteDecimal--
    } else if (posX2 - posX1 == 1 && field[posX1+1][posY1] == 'W' && posX2 == lastTurnWhite[0]
        && lastTurnWhite[1] - posY2 == 1 && lastTurnWhite[2] == 2) { //En passant right
        field[posX2][posY2] = 'B'
        field[posX1][posY1] = ' '
        field[posX1+1][posY1] = ' '
        whiteDecimal--
    } else return false
    return true
}

var availableDecimalTurnsWhite = ""
var availableDecimalTurnsBlack = ""
fun checkWinConditions() {
    if (lastTurnWhite[1] == 7 || blackDecimal == 0) {
        println("White Wins!\nBye!")
        exitProcess(0)
    } else if (lastTurnBlack[1] == 0 || whiteDecimal == 0) {
        println("Black Wins!\nBye!")
        exitProcess(0)
    } else {
        for (col in 1.. 6) { // available white positions
            for (row in 1 .. 6) {
                if (field[col][row] == 'W') {
                    if (field[col][row+1] == 'B' && field[col-1][row+1] != 'B' && field[col+1][row+1] != 'B') {
                        availableDecimalTurnsWhite += 'f' // false - not available
                    } else availableDecimalTurnsWhite += 't' // true - available turn
                } else if (field[col][row] == 'B') {
                    if (field[col][row-1] == 'W' && field[col-1][row-1] != 'W' && field[col+1][row-1] != 'W') {
                        availableDecimalTurnsBlack += 'f' // false - not available
                    } else availableDecimalTurnsBlack += 't' // true - available turn
                }
            }
            if (field[0][col] == 'W') { // check left column white player
                availableDecimalTurnsWhite += if (field[0][col+1] == 'B' && field[1][col+1] != 'B') 'f'
                else 't'
            }
            if (field[7][col] == 'W') { // check right column white player
                availableDecimalTurnsWhite += if (field[7][col+1] == 'B' && field[6][col+1] != 'B') 'f'
                else 't'
            }
            if (field[0][col] == 'B') { // check left column black player
                availableDecimalTurnsBlack += if (field[0][col-1] == 'W' && field[1][col-1] != 'W') 'f'
                else 't'
            }
            if (field[7][col] == 'B') { // check right column black player
                availableDecimalTurnsBlack += if (field[7][col-1] == 'W' && field[6][col-1] != 'W') 'f'
                else 't'
            }
        }
    }
}
